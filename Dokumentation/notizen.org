* Zeitplanung

|                                       | ~Dauer  | Beginn                    | Delta | Ende            |
|---------------------------------------+---------+---------------------------+-------+-----------------|
| Aufsetzen Kafka Cluster               | 5 Tage  | <2016-04-11 Mo>           |       | <2016-04-15 Fr> |
| Haskell Microservice Producer         | 5 Tage  | <2016-04-18 Mo>           |       | <2016-04-22 Fr> |
| Haskell Microservice Consumer         | 3 Tage  | <2016-04-25 Mo>           |       | <2016-04-27 Mi> |
| Spring Microservice Producer/Consumer | 5 Tage  | <2016-04-28 Do>           |       | <2016-05-04 Mi> |
| Dokumentation schreiben               | 10 Tage | wann immer etwas auffällt |       | <2016-05-18 Mi> |
| Korrektur /Abgabe                     |         |                           |       |                 |
* Journal
** <2016-04-11 Mo>
*** DONE Docker aufsetzen                                   :Aufsetzen_Kafka:
    CLOSED: [2016-04-12 Di 12:27]
    ~brew cask install dockertoolbox~
*** DONE Docker Compose installieren                        :Aufsetzen_Kafka:
    CLOSED: [2016-04-12 Di 12:27]
    in toolbox enthalten
*** DONE Docker aufsetzen                                   :Aufsetzen_Kafka:
    CLOSED: [2016-04-12 Tue 16:25]
    Guide: https://docs.docker.com/mac/step_one/
    
** <2016-04-12 Di>
*** DONE Repository und Dokumentation aufsetzen               :Dokumentation:
    CLOSED: [2016-04-12 Di 12:26]
    Ich werde ein Git Repository unter [[https://github.com/kRITZCREEK/praxisprojekt][GitHub]] führen, in dem ich alle relevanten
    Artefakte aufbewahre.

    Die Dokumentation werde ich mit ~org-mode~ schreiben und mittels
    latex-export mit XeLateX kompilieren.

    Wenn man die Schriftarten ~Gentium Plus~, ~Charis SIL~ und ~Dejavu Mono~
    installiert hat, lässt sich der org export mit xelatex kompilieren.

*** DONE Bibtex Datei anlegen                                 :Dokumentation:
    CLOSED: [2016-04-12 Di 14:00]
*** DONE Bibtex Datei in org build einbauen                   :Dokumentation:
    CLOSED: [2016-04-12 Di 14:00]
*** DONE Latex auf dem Mac aufsetzen                          :Dokumentation:
    CLOSED: [2016-04-12 Tue 15:57]
    ~brew cask install mactex~
    ~brew tap caskroom/fonts~
    ~brew cask install font-gentium-plus~
    ~brew cask install font-charis-sil~
    ~brew cask install font-dejavu-sans~
** <2016-04-13 Wed>
*** TODO unter OSX erfolgreich mit dem german & csquotes package kompilieren :Dokumentation:
*** TODO Docker image anwerfen                              :Aufsetzen_Kafka:

    Guide:http://wurstmeister.github.io/kafka-docker/ 

#+BEGIN_SRC bash
    git clone git@github.com:wurstmeister/kafka-docker.git
    cd kafka-docker
    mv docker-compose.yml docker-compose.yml.bak
    mv docker-compose-single-broker.yml docker-compose.yml
    docker-machine ip # 192.168.99.100
    # KAFKA_ADVERTISED_HOST_NAME in docker-compose.yml
    # auf `docker-machine ip` setzen
    docker-compose up
#+END_SRC

Jetzt komme ich nicht an die Zookeeper IP... Ich schaue später weiter

* Offene TODOs
** Aufsetzen Kafka Cluster
*** TODO Kafka Cluster in Docker konfigurieren, sodass simples Skript funktioniert :Aufsetzen_Kafka:
    - In ~docker-compose.yaml~ ~KAFKA_ADVERTISED_HOST_NAME~ auf Rückgabe von
      ~docker-machine ip~ setzen.
*** TODO Topic Schema definieren, dass verwendet werden soll :Aufsetzen_Kafka:
*** TODO Skript zum initialen befüllen von Kafka mit Topics anlegen :Aufsetzen_Kafka:
** Haskell Microservice Producer
** Haskell Microservice Consumer
** Spring Microservice Producer/Consumer
** Dokumentation schreiben
*** TODO Abstrakt schreiben, dass den praktischen Teil einfängt :Dokumentation:
*** TODO Bibtex Datei mit Referenzen befüllen                 :Dokumentation:
*** TODO Titelseite erstellen                                 :Dokumentation:

* Tasks
** DONE Fix default notes file shenanigens
   CLOSED: [2016-04-13 Wed 07:12]
   [2016-04-13 Wed]
   [[file:~/dotfiles/.spacemacs.d/init.el::"~/Documents/praxisprojekt/Dokumentation/notizen.org"))]]

   ~with-eval-after-load 'org~ hat's geregelt
