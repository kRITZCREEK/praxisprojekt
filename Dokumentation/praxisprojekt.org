#+BEGIN_SRC emacs-lisp :results silent :exports none
    (unless (find "kc-report" org-latex-classes :key 'car
                  :test 'equal))

  (add-to-list 'org-latex-classes
               '("kc-report"
                 "\\documentclass[11pt,a4paper]{scrreprt}
  \\usepackage[T1]{fontenc}
  \\usepackage{fontspec}
  \\usepackage{graphicx}
  \\defaultfontfeatures{Mapping=tex-text}
  \\setromanfont{Charis SIL}
  \\setsansfont{Gentium Plus}
  \\setmonofont[Scale=0.8]{DejaVu Sans Mono}
  \\usepackage{geometry}
        [NO-DEFAULT-PACKAGES]
        [NO-PACKAGES]"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (setq org-latex-pdf-process
    '("latexmk -xelatex -shell-escape -interaction=nonstopmode -pdf %f"))
    (setq org-latex-listings 'minted)
#+END_SRC

#+AUTHOR: Christoph Hegemann
# #+TITLE: Messaging -- Entkopplung von Microservices
#+TITLE: Isolation & Virtualisierung von Services mit Docker
#+LATEX_CLASS: kc-report
# #+LATEX_CLASS_OPTIONS: [a4paper, oneside, abstract=true, BCOR=11pt, fontsize=11pt, draft=true, titlepage=false, headsepline=true]
#+LATEX_CLASS_OPTIONS: [a4paper, oneside, abstract=true, BCOR=11pt, fontsize=11pt, draft=false, titlepage=true, headsepline=true]
#+LATEX_HEADER: \usepackage[hyperref,x11names]{xcolor}
#+LATEX_HEADER: \usepackage[colorlinks=true,urlcolor=SteelBlue4,linkcolor=Firebrick4]{hyperref}
#+LATEX_HEADER: \usepackage[normalem]{ulem}
#+LATEX_HEADER: \usepackage[ngerman]{babel}
#+LATEX_HEADER: \usepackage{csquotes}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usemintedstyle{emacs}
#+LATEX_HEADER: \setcounter{tocdepth}{1}
#+LATEX_HEADER: \setcounter{secnumdepth}{1}
#+LATEX_HEADER: \pagestyle{headings}
#+LATEX_HEADER: \usepackage[backend=biber, style=science, backref=true]{biblatex}

#+LATEX_HEADER: \titlehead{\center{Technische Hochschule Köln}}
#+LATEX_HEADER: \subject{Praxisprojekt}
#+LATEX_HEADER: \subtitle{Im Kontext der Implementierung und Integration von Microservices}
#+LATEX_HEADER: \publishers{Betreut von Prof.\ Dr.\ Christian Kohls}
#+LATEX_HEADER: \addbibresource{literatur.bib}

#+BIBLIOGRAPHY: literatur.bib
#+LANGUAGE: de
#+OPTIONS: H:4 ':t

#+BEGIN_abstract

Bei der REWE Digital wird ein großes Softwareprojekt umgesetzt. Um die große
Anzahl an Teams, Entwicklern und Systemen zu bändigen hat man sich für eine
Microservice Architektur entschieden. Das Aufteilen der Domäne in viele kleine,
unabhängige Bereiche erlaubt es Komplexität auf der Software Ebene gering zu
halten, bringt jedoch neue Schwierigkeiten im Bereich von Operations, Deployment
und Integration mit sich.

Ein Ansatz um die gestiegene Komplexität von Provisionierung und Integration von
Microservices anzugehen ist Virtualisierung mithilfe von Containertechnologie,
wie die derzeit verbreiteste Lösung, das von der gleichnamigen Firma entwickelte
Docker. In diesem Praxisprojekt werde ich mit der Implementierung von
Microservices und ihrem Deployment mithilfe von Docker beschäftigen und meine
Fortschritte sowie Rückschläge dokumentieren.

#+END_abstract

* Motivation

** Großes Software Projekt bei der REWE Digital
*** Mehr als 20 Teams, je 5-7 Mitarbeiter
*** Hoher Featuredruck, kaum Maintenanceaufwand
*** Schnell wachsen
*** Agiles Vorgehen
*** Rapid Prototyping
** Microservice Architektur
*** Microservices
    "Microservices are small, autonomous services that work together"
    \cite{Newman-BuildingMicroservices}
    
    Auf kleinen Services lässt sich schnell iterieren. Sollte sich
    herausstellen, dass die falsche Herangehensweise gewählt wurde, kann ein
    bereits geschriebener Microservice in vertretbarem Zeitaufwand neu
    geschrieben werden.

    Durch die hohe Autonomie der Services können Teams parallel arbeiten und an
    vielen Stellen iterieren ohne sich gegenseitig zu behindern.

*** Korrelation Kommmunikationsstruktur -- Softwarestruktur
    #+BEGIN_QUOTE

    Organizations which design systems ... are constrained to produce designs
    which are copies of the communication structures of these organizations.

    -- Melvin E. Conway

    #+END_QUOTE
*** Domain Driven Design 
    Eric Evans \cite{Evans-DomainDrivenDesign}
** Integrationsstrategien
*** Integration über eine gemeinsame (relationale) Datenbank
    #+BEGIN_QUOTE

    "If a family of integrated applications all rely on
    the same database, then you can be pretty sure that they are always
    consistent all of the time" \cite{Hohpe-EnterpriseIntegrationPatterns}

    #+END_QUOTE

    Klassischerweise integriert man verschiedene Applikationen und Services
    mithilfe einer geteilten relationen Datenbank. Diese Herangehensweise hat
    viele Vorteile:

    - Hohe Konsistenzgarantien

      Als einzige Quelle der Wahrheit, kann eine Datenbank mithilfe von
      Transaktionen dafür sorgen, dass niemals ein inkonsistenter Datenbestand
      abgespeichert werden kann.

    - Breite Unterstützung von SQL

      Es gibt für nahezu alle Sprachen und Frameworks hochwertige SQL
      Bibliotheken die sich seit vielen Jahren in der Industrie bewährt haben.

    - Ein gemeinsames Datenmodell

      Da alle Dienste mit dem selben Schema arbeiten, können schon früh
      Inkompatibilitäten zwischen den Services und Missverständnisse bei der
      Modellierung des Datenmodelles gefunden und geklärt werden.

    In einer Microservice Architektur wird die geteilte Datenbank jedoch von
    Nachteilen und Problemen geplagt. 

    - Ein gemeinsames Datenmodell

      Alle Services müssen mit demselben Datenmodell arbeiten. Dies widerspricht
      ganz deutlich dem Prinzip der "Bounded Contexts" aus Domain Driven Design.
      Nicht jeder Service hat dieselbe Sicht auf eine Entität. Hier einen
      gemeinsamen Nenner zu finden, erfordert dass sich alle Teams einigen und
      jede Änderung am Datenmodell ist ein potentieller Breaking Change für
      jeden Service.

    - Implementierungsdetails liegen offen

      Ein Schema in einer Datenbank ist als eine API zu sehen, da jeder Client
      der Datenbank auf das Schema zugreifen kann. "The DB is effectively a very
      large, shared API that is also quite brittle."
      \cite{Newman-BuildingMicroservices})

      Ein Service legt also mit seinem Datenmodell einen großen Teil seiner
      Implementierung offen. Dies sorgt für Kopplung zwischen den Services und
      widerspricht damit eindeutig der Zielsetzung der Microservice Architektur.

    - Single Point of Failure

      In einer Architektur, die darauf ausgelegt ist, einzelne Services
      unabhängig voneinander zu machen um Ausfälle lokal zu halten und
      Fehlertolerant zu sein hat eine von allen Services verwendete Datenbank
      keinen Platz. Wenn diese ausfällt ist das gesamte System ausgefallen.

    - Performanz Probleme

      Da Konsistenzgarantien nur durch Locking und Transaktionen gewährleistet
      werden können, kann ein einziger Service der viel Last auf der Datenbank
      erzeugt, alle anderen Services mit "ausbremsen".
*** Messaging
** Message Broker
*** Apache Kafka
  A high-throughput distributed messaging system

  - Partitionierter Commit Log
  - Verteilt. Also mehrere Instanzen
  - CAP Theorem
    - Consistency
    - Availability
    - +Partition Tolerance+
*** RabbitMQ/ActiveMQ


* Der Prototyp
  Um die Tauglichkeit von Docker untersuchen zu können und kritische Fragen
  bereits frühzeitig aufdecken zu können, haben wir uns dafür entschieden einen
  Prototyp zu entwicklen, der sich der aktuellen Systemstruktur annähert und
  eine breite Menge an bekannten Szenarien und Schwierigkeiten abdeckt.

  Es sollen zwei Services implementiert werden, die per Messaging integriert und
  vollständig unabhängig voneinander in Docekr Containern deployed werden
  sollen. Weiterhin müssen sie unabhängig voneinander skalierbar sein und der
  Ausfall des einen Services darf den anderen Service nicht mitreißen.

  Inhaltlich sollen die Services sich mit einer gemeinsamen Entität
  beschäftigen, auf die sie jedoch unterschiedliche Sichten haben. Im Kafka wird
  diese Entität als ein Topic abgebildet, welcher von einem der Services als
  "Owner" oder Producer und von dem anderen Service als Consumer konsumiert
  wird.

  Services haben unterschiedliche Modelle für die selbe Entität (Domain Model) um
  das Prinzip der Bounded Contexts im Sinne des Domain Driven Design abzubilden.

  Der Prototyp braucht eine Story für Dinge wie Deployment oder Monitoring um
  Anforderungen an realen Services zu genügen.
  
** Produktservice
   Der Produktservice ist Owner des Produkt Topics. Er stellt eine API zur
   Verfügung, die es erlaubt Produktdaten zu ändern. Hier könnten in der
   Realität mehrere Anwendungen Produktdaten ändern. Beispiele wären eine
   Webanwendung, in der Fachmitarbeiter Änderungen durchführen, sowie ein
   regelmäßiger Dienst, der die neuesten Angebote und Rabattaktionen automatisch
   einspielt. In unserem Protoyp werden diese Änderungen zufällig generiert.

*** Modell
    Der Produktservice hat folgende Sicht auf die Produktentität:

    #+BEGIN_SRC haskell
      data Produkt = Produkt
        { id           :: String
        , name         :: String
        , beschreibung :: String
        , preis        :: Preis
        , rabatt       :: Prozent
        }
    #+END_SRC
    #+CAPTION: Produkt Modell des Produktservices
    Updates, die der Produktservice an Kafka schickt, enthalten eine Payload in
    dieser Form.

** Warenkorbservice

   Der Warenkorbservice ist Owner für kein Topic. Stattdessen verwaltet er die
   Warenkörbe der Kunden, die für die restlichen Services nicht zur Verfügung
   stehen.

   [[fig:infra-schaubild][Infra Schaubild]]

*** Modell
    Der Warenkorbservice hat folgende Sicht auf die Produktentität:
    #+BEGIN_SRC haskell
      data Produkt =
        Produkt
        { id    :: String
        , name  :: String
        , preis :: Preis
        }
    #+END_SRC
    #+CAPTION: Produkt Modell des Warenkorbservices
    Hierbei fällt auf, dass der Warenkorb nur an einem Subset der Felder der
    Produktservice Produktentität Kafka interessiert ist. Weiterhin beschreibt
    das ~preis~ Attribut den Preis, auf den der Rabatt bereits angewendet wurde.

    Es wird also eine /Selektion/ auf die vorhandenen Felder angewendet, und die
    verbleibenden Felder werden weiter durch /Transformation/ & /Aggregation/ in
    ein Modell, das der Domäne des Warenkorbes[fn:artikel] entspricht,
    transformiert.

[fn:artikel]
In Wirklichkeit ist der Begriff des *Preises* im E-Commerce noch
deutlich komplexer. Einem *Produkt* ist zunächst einmal gar kein Preis
zugewiesen. Stattdessen ist ein Produkt eine Einheit, die für die
Präsentation verwendet wird (zB. Kaffetasse). \\
Einen Preis hingegen weist man einem *Artikel* zu, der Elemente wie Art (zB.
Farbe), Region (Produkte haben in unterschiedlichen Regionen unterschiedliche
Preise) und Rabattaktionen beinhaltet.

*** API
    Der Warenkorbservice bietet die folgenden Operationen für das Bearbeiten von
    Warenkörben an.
     

**** Warenkorb anlegen
     Legt einen neuen Warenkorb an und gibt die ~id~ des Warenkorbes zurück

**** Artikel hinzufügen
     Fügt einem bestehenden Warenkorb einen Artikel in der angegebenen Quantität
     hinzu.
**** Bestellung erstellen
     Weist den Warenkorbservice an, eine Bestellung aus einem bestehenden
     Warenkorb zu erstellen und an einen eventuellen Checkoutservice
     weiterzureichen.


* Infrastruktur und Provisionierung
** Anforderungen
*** Elastizität
    Ein Message Broker wie Kafka kann zu verschiedenen Zeiten unter variierender
    Last arbeiten haben. Zu Stoßzeiten werden sehr viele Services Messages
    produzieren und abrufen. Um diesen sich ändernden Anforderungen gerecht zu
    werden, muss Kafka so aufgesetzt werden, dass dynamisch neue Broker
    hinzugefügt oder heruntergefahren werden können.
*** Automatisierung
    Die Provisionierung einer Maschine mit einem Kafka Broker muss vollständig
    automatisch ablaufen. Dies steht in direktem Bezug zu /Elastizität/ und dem
    Prinzip der Automatisierung von Microservices.
*** Resilienz
    Die Message Queue stellt einen /Single Point of Failure/ dar. Sollte sie
    ausfallen können die Services nicht miteinander kommunizieren und die
    Verfügbarkeit des Gesamtsystems kann nicht sichergestellt werden. Daher
    müssen Fallback Instanzen provisioniert werden, die einspringen wenn
    Ausfälle auftreten. Weiterhin müssen ausgefallene Instanzen automatisch
    neugestartet und provisioniert werden.

** Docker/Container Technologie
*** Warum Docker?
    "Docker aims to reduce the cycle time between code being written and code being
    tested, deployed, and used. It aims to make your applications portable, easy to
    build, and easy to collaborate on."\cite{Turnbull-TheDockerBook}

    "Docker is being used in production by multiple companies. It provides many
    of the benefits of lightweight containers in terms of efficiency and speed
    of provisioning, together with the tools to avoid many of the
    downsides."\cite{Newman-BuildingMicroservices}
*** Terminologie und Bausteine von Docker
   - Docker Daemon

     Ein Hintergrundprozess, der die laufenden Docker Container verwaltet und
     auf Kommandos des Nutzer reagiert. Dieser Daemon kann auf der gleichen
     Maschine wie der Nutzer ausgeführt werden, oder remote auf einem Server.

   - Docker Client

     Ein Docker Client ist ein Programm mit dessen Hilfe der Nutzer Befehle an
     einen Docker Daemon senden kann. Üblicherweise verwendet man einen CLI 
     (Command Line Interface) Client, es gibt aber auch bereits Clients mit
     einer graphischen Nutzeroberfläche (Kitematic).

   - Docker Images

     Ein Image ist der kleinste Building Block in der Docker Welt. Images werden
     aufeinander aufgesetzt und lassen sich in verschiedenen Projekten und
     Applikationen wiederverwenden. Ein Image beinhaltet dabei immer einen
     Befehl, wie zum Beispiel:
     1. Füge eine Datei hinzu
     2. Öffne einen Port
     3. Lade ein Source Archiv herunter
     4. Führe einen Shell Befehl aus
     5. ...

   - Docker Registry

     Eine Docker Registry ist ein Registry, bei der Nutzer ihre Images
     hochladen, versionieren und für andere Nutzer verfügbar machen können. Eine
     Docker Registry ist vergleichbar mit einem Git Server auf dem Entwickler
     ihren Source Code hochladen, versionieren und für andere Nutzer verfügbar
     machen können.

     Die Macher von Docker betreiben eine öffentliche Registry mit dem Namen
     Dockerhub. Dockerhub ist für Nutzer, die ihre Images öffentlich machen
     kostenlos, und für Unternehmen oder Nutzer die ihre Images privat verwalten
     wollen für Geld nutzbar.

     Weiterhin gibt es die Möglichkeit eine Registry selbst zu betreiben, wie es
     bei der REWE Digital der Fall ist. Hierfür sprechen einige Gründe:
     1. Mehr Kontrolle
     2. Keine Abhängigkeit von (Docker Macher)
     3. Images sind häufig mehrere 100MB groß und es ist daher schneller wenn
        die Registry nah bzw. im selben Datencenter wie die Container betrieben
        werden.

   - Docker Container

*** Infrastruktur versionierbar machen
    In Docker verwendet man sogenannte Dockerfiles um das Erzeugen von Images in
    reproduzierbaren Schritten festzuhalten. Diese Dockerfiles liegen in
    Textform vor, und lassen sich damit in ein Version Control System wie GIT
    einchecken und versionieren.

    Als Beispiel soll hier einmal das, mit Kommentaren versehene, Dockerfile für
    den Runtime Container dienen:

#+BEGIN_SRC Dockerfile
# Es wird das fpco/stack-run base image verwendet, welches alle nötigen
# Laufzeitabhängigkeiten für kompilierte Haskell binaries enthält.
FROM fpco/stack-run:lts-5

# Da Kafka Client Bibliothek librdkafka nicht in den offiziellen Ubuntu
# repositories verfügbar ist, müssen wir sie selbst kompilieren und
# installieren mit build-essential tools wie 'gcc' und 'make'

# curl benötigen wir, um den Quellcode für die Bibliothek herunterzuladen
RUN apt-get update && \
    apt-get install -y \
      curl build-essential

# Hier laden wir ein mit 'tar' komprimiertes Archiv herunter, welches 
# den Quellcode für librdkafka enthält.
RUN curl -o /root/librdkafka-0.9.0.99.tar.gz -SL \
      https://github.com/edenhill/librdkafka/archive/0.9.0.99.tar.gz && \

# Wir entpacken das Archiv
    tar -xzf /root/librdkafka-0.9.0.99.tar.gz -C /root && \
    cd /root/librdkafka-0.9.0.99 && \

# Jetzt kompilieren wir librdkafka und installieren die entstandene
# Bibliothek mit 'make install' nach '/usr/lib wo sie für unsere 
# Binaries verfübar ist
    ./configure && \
    make && \
    make install && \
    cd / && \

# Hier cachen wir das anfänglich heruntergeladene Archiv um es bei
# zukünftigen Durchläufen nicht mehr herunterladen zu müssen.
    tar czf librdkafka-0.9.0.99.tar.gz \
      usr/local/include/librdkafka usr/local/lib/librdkafka*
#+END_SRC

   Dieses Dockerfile kann nun verwendet werden um das Laufzeitimage neu zu
   bauen.

   Einzelne Images können, analog zu Git, mit Tags versehen werden, sodass
   getagte Versionen eines Dockerimages leicht referenziert und als Bausteine
   für weitere Images verwendet werden können.

   Weiterhin lassen sich mit einem Tag versehene Images in eine /Docker
   Registry/ pushen. Von dort können sie dann herunterladen und ausgeführt
   werden, ohne sie erneut bauen zu müssen.

*** Image Hierarchie
    Die Docker Container, die die fertigen Services enthalten, werden aus
    folgenden Images zusammengebaut.

    #+ATTR_LATEX: :width 8cm
    #+CAPTION: Docker Images
    [[./bilder/infrastruktur.png]]

*** docker-compose koordiniert zusammengehörige Container (Bsp. n-Services + 1 Datenbank)
*** Nachteile:
   - Benötigt im großen Stil Service Discovery
   - Verleitet dazu Security Updates nicht einzuspielen
** Infrastruktur Landschaft

   #+CAPTION: Außensicht Systemlandschaft
   #+LABEL: fig:infra-schaubild
   [[./bilder/infra-schaubild.jpg]]

** Container für Services
*** librdkafka
*** Die verwendeten Images
   - Build image für Haskell Projekte 

     Base Image: fpco/stack-build

     Beinhaltet Haskell Compiler und build tools + librdkafka dependency kritzcreeek/stack-kafka-build
   - Run image für Haskell Projekte
     Base Image fpco/stack-run
     
     Beinhaltet Laufzeitabhängigkeiten für Haskell Projekte. Das sind zum
     Beispiel Systembibliotheken die dynamisch gegen die Executable gelinkt
     sind.
       + buildtools (gcc etc.)
       + eventuell weitere Abhängigkeiten (openssl)
       + librdkafka dependency kritzcreeek/stack-kafka-run
         
   - Docker Konfiguration für Services geschieht in ~stack.yaml~
     - Gebaut werden die Projekte innerhalb des Build Containers
       (kritzcreeek/stack-kafka-build). Kommando: ~stack build~
     - Run Container für die Services werden auf das Run Image aufgesetzt.
       Kommando: ~stack image container~
     - Services können mittels ~docker run -d kritzcreeek/produktservice
       produktservice~ gestartet werden.
     - Services können nun mit in docker-compose aufgenommen und leichter
       konfiguriert werden.
** Monitoring?


* Fazit
\printbibliography
