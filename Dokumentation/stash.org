* Integrationsstrategien
   Ich werde im folgenden die /Integation über eine gemeinsame Datenbank/
   analysieren und anschließend die letztendlich gewählte Strategie des
   Messaging beschreiben.
*** Integration über eine gemeinsame (relationale) Datenbank
    #+BEGIN_QUOTE

    "If a family of integrated applications all rely on
    the same database, then you can be pretty sure that they are always
    consistent all of the time" \cite{Hohpe-EnterpriseIntegrationPatterns}

    #+END_QUOTE

    Klassischerweise integriert man verschiedene Applikationen und Services
    mithilfe einer geteilten relationen Datenbank. Diese Herangehensweise hat
    viele Vorteile:

    - Hohe Konsistenzgarantien

      Als einzige Quelle der Wahrheit, kann eine Datenbank mithilfe von
      Transaktionen dafür sorgen, dass niemals ein inkonsistenter Datenbestand
      abgespeichert werden kann.

    - Breite Unterstützung von SQL

      Es gibt für nahezu alle Sprachen und Frameworks hochwertige SQL
      Bibliotheken die sich seit vielen Jahren in der Industrie bewährt haben.

    - Ein gemeinsames Datenmodell

      Da alle Dienste mit dem selben Schema arbeiten, können schon früh
      Inkompatibilitäten zwischen den Services und Missverständnisse bei der
      Modellierung des Datenmodelles gefunden und geklärt werden.

    In einer Microservice Architektur birgt die geteilte Datenbank jedoch viele
    Nachteile.

    - Ein gemeinsames Datenmodell

      Alle Services müssen mit demselben Datenmodell arbeiten. Dies widerspricht
      ganz deutlich dem Prinzip der "Bounded Contexts" aus Domain Driven Design.
      Nicht jeder Service hat dieselbe Sicht auf eine Entität. Hier einen
      gemeinsamen Nenner zu finden, erfordert dass sich alle Teams einigen und
      jede Änderung am Datenmodell ist ein potentieller Breaking Change für
      jeden Service.

    - Implementierungsdetails liegen offen

      Ein Schema in einer Datenbank ist als eine API zu sehen, da jeder Client
      der Datenbank auf das Schema zugreifen kann. "The DB is effectively a very
      large, shared API that is also quite brittle."
      \cite{Newman-BuildingMicroservices}

      Ein Service legt also mit seinem Datenmodell einen großen Teil seiner
      Implementierung offen. Dies sorgt für Kopplung zwischen den Services und
      widerspricht damit eindeutig der Zielsetzung der Microservice Architektur.

    - Single Point of Failure

      In einer Architektur, die darauf ausgelegt ist, einzelne Services
      unabhängig voneinander zu machen um Ausfälle lokal zu halten und
      Fehlertolerant zu sein hat eine von allen Services verwendete Datenbank
      keinen Platz. Wenn diese ausfällt ist das gesamte System ausgefallen.

    - Performanz Probleme

      Da Konsistenzgarantien nur durch Locking und Transaktionen gewährleistet
      werden können, kann ein einziger Service der viel Last auf der Datenbank
      erzeugt, alle anderen Services mit "ausbremsen".

*** Messaging
#+BEGIN_QUOTE
Messaging makes applications loosely coupled by communicating asynchronously
-- Gregor Hohpe cite:Hohpe-EnterpriseIntegrationPatterns
#+END_QUOTE
    Bei Messaging senden sich verschiedene Systeme kleine Datenpakete über einen
    Messagebus. Dieser Messagebus, oder auch Messagebroker genannt, sorgt dafür
    das Nachrichten an die richtigen Empfänger zugestellt werden. Hierfür
    benötigt der Messagebus einige Funktionalitäten.

    - Er muss eine Queue von eingegangenen Messages verwalten
    - Er muss, falls das Empfängersystem nicht erreichbar ist, Nachrichten
      verwahren und zu einem späteren Zeitpunkt zustellen
    - Er muss gesendete Nachrichten auch nach der Zustellung aufbewahren und
      wieder abspielen können, um neu hinzugekommene Systeme auf den aktuellsten
      Stand bringen zu können.

    Bei der REWE digital hat man sich für das Messaging System *Apache Kafka*
    entschieden. Kafka wird auf seiner Website als /A high-throughput
    distributed messaging system/ angepriesen und hat einige interessante
    Charakteristiken, mit welchen ich mich in meiner Bachelorarbeit noch einmal
    genauer auseinander setzen werde. Für unsere Zwecke reicht es zunächst
    festzustellen, dass Kafka alle Anforderungen an einen Messagebus für die
    Systemintegration erfüllt.
